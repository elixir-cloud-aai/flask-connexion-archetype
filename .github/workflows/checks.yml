# This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: Python package

on:
  push:
    branches: [ dev ]
  pull_request:
    branches: [ dev ]

jobs:
  test:
    name: Run linting and unit tests
    runs-on: ubuntu-latest
    strategy:
      fail-fast: true
      matrix:
        python-version: ["3.7", "3.8", "3.9", "3.10"]

    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install requirements
        run: |
          pip install -r requirements.txt
          pip install -r requirements_dev.txt
      - name: Lint with flake8
        run: flake8
      - name: Calculate unit test coverage
        run: |
          coverage run --source foca -m pytest
          coverage xml
      - name: Submit Report to Codecov
        uses: codecov/codecov-action@v2
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage.xml
          fail_ci_if_error: true
          verbose: true
      - name: Run tests on petstore app
        run: |
          cd ./examples/petstore
          docker-compose up --build -d
          cd ../..
          sleep 10
          pytest ./tests/integration_tests.py

  DockerHub:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: true
      matrix:
        python-version-tag: [["3.7", "3.7"], ["3.8", "3.8"], ["3.9", "3.9"], ["3.9", "latest"]]
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2
      - name: Build & Publish image to DockerHub
        env:
          docker_username: ${{ secrets.DOCKER_USERNAME }}
          docker_password: ${{ secrets.DOCKER_PASSWORD }}
          docker_org: ${{ secrets.DOCKER_ORG }}
          repo_name: ${{ github.event.repository.name }}
        run: |
          export branch_name=${GITHUB_HEAD_REF##*/}
          if [ ${branch_name} = "dev" ]; then
              export tag="$(date '+%Y%m%d')"
          else
              export tag=${branch_name}
          fi
          if [${{ matrix.python-version-tag[1] }} = "latest"]; then
              export tag=${{ matrix.python-version-tag[1] }}
          else
              export tag=${tag}-py${{ matrix.python-version-tag[1] }}
          fi
          docker build . -t ${docker_org}/${repo_name}:latest \
            -f docker/Dockerfile_py${{ matrix.python-version-tag[0] }}
          docker tag ${docker_org}/${repo_name} ${docker_org}/${repo_name}:${tag}
          echo $docker_password | docker login -u $docker_username --password-stdin
          if [${tag} = "latest"] then;
              if [${branch_name} = "dev"] then;
                  docker push ${docker_org}/${repo_name}:${tag}
              fi
          else
             docker push ${docker_org}/${repo_name}:${tag}
          fi 
